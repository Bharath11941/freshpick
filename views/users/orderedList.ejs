<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Fresh Pick</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="/assets/imgs/theme/favicon.svg"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Lora:400,400i,700,700i&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Amatic+SC:400,700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <link rel="stylesheet" href="css/open-iconic-bootstrap.min.css" />
    <link rel="stylesheet" href="css/animate.css" />

    <link rel="stylesheet" href="css/owl.carousel.min.css" />
    <link rel="stylesheet" href="css/owl.theme.default.min.css" />
    <link rel="stylesheet" href="css/magnific-popup.css" />

    <link rel="stylesheet" href="css/aos.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />

    <link rel="stylesheet" href="css/ionicons.min.css" />

    <link rel="stylesheet" href="css/bootstrap-datepicker.css" />
    <link rel="stylesheet" href="css/jquery.timepicker.css" />

    <link rel="stylesheet" href="css/flaticon.css" />
    <link rel="stylesheet" href="css/icomoon.css" />
    <link rel="stylesheet" href="css/style.css" />
    <link rel="shortcut icon" type="image/x-icon" href="/assets/imgs/theme/favicon.svg" />
    <style>
      /* Decorated links for Home and Shop */
      .decorated-link {
        position: relative;
        color: #333; /* Set the link text color */
        text-decoration: none;
        transition: color 0.3s ease;
        padding-right: 10px; /* Adjust this value to add spacing between text and decoration */
      }
    
      .decorated-link:before {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 0;
        height: 2px; /* Adjust this value to change the decoration line's height */
        background-color: #ff8c00; /* Set the decoration line color */
        transition: width 0.3s ease;
      }
    
      .decorated-link:hover {
        color: #ff8c00; /* Set the link text color on hover */
      }
    
      .decorated-link:hover:before {
        width: 100%;
      }
    </style>
    <style>
      .invoice-btn{
        display: inline-block;
        margin-top: 30px;
        padding: 12px 20px;
        background-color: #ff0000;
        color: #fff;
        text-decoration: none;
        font-size: 15px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
      }
    </style>
  </head>
  <body class="goto-here">
    <%- include("../layouts/userNav.ejs") %>

    <div
      class="container breadcrumb-section"
      style="background: linear-gradient(to bottom, #93c747, #56a82a)"
    >
      <div class="breadcrumb-wrapper">
        <div class="container">
          <div class="row">
            <div class="col-12">
              <h2 class="breadcrumb-title" style="color: white">Your Orders</h2>
              <h4 class="breadcrumb-subtitle" style="color: white">
                Track your orders and view details
              </h4>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- ...:::: End Breadcrumb Section:::... -->

    <div class="container mb-4">
      <div class="d-flex align-items-center justify-content-between">
        <h3></h3>
        <a href="/userProfile" class="btn btn-md btn-success mt-3">Back</a>
      </div>
      <div>
        <% if (orderHistory.length > 0) { orderHistory.forEach(order => { %>
        <div class="order-box border rounded p-4 mb-5">
          <h5 class="mb-3">Order ID: <%= order._id %></h5>
          <div class="row">
            <div class="col-md-6">
              <p>Date: <%= order.date %></p>
              <p>Order Time: <%= order.time %></p>
              <% if (order.status !== "Cancelled" && order.status !== "Return Pending") { %>
              <h5 id="statusChange-<%= order._id %>" class="text-success">
                Status: <%= order.status %>
              </h5>
              <% } else { %>
              <h5 id="statusChange-<%= order._id %>" class="text-danger">
                Status: <%= order.status %>
              </h5>
              <% } %>
              <!-- <button onclick="downloadInvoiceHelper('<%= order._id %>')" class="invoice-btn">Download Invoice</button> -->
              <a href="/invoice?orderId=<%=order._id  %>"  class="invoice-btn">Download Invoice</a>
        
            </div>
            <div class="col-md-6" id="cancelButton-<%= order._id %>">
              <p>Total: â‚¹<span id="total"><%= order.total %></span></p>
              <p>Method : <span id="method"><%= order.method %></span></p>
              <% if (order.status !== "Delivered" && order.status !==
              "Cancelled" && order.status !== "Return Pending" && order.status !== "Return Approved") { %>
              <p>
                Expected Delivery: <%= order.expectedDelivery ?
                order.expectedDelivery.toDateString() : '' %>
              </p>
              <% } %>
              <a
                href="/orderedProduct?id=<%= order._id %>"
                class="btn btn-md btn-success"
                >View Details</a
              >
              <% if (order.status === "Delivered") { %>
                
                <% const orderDate = new Date(order.date) %>
                <% const returnExpiryDate = new Date(orderDate) %>
                <%  returnExpiryDate.setDate(returnExpiryDate.getDate() + 10); %>
                <% const currentDate = new Date() %>
                <% if(currentDate<=returnExpiryDate){%>
                  <a
                href="#"
                onclick="returnOrderHelper('<%= order._id %>')"
                class="btn btn-md btn-danger buttonReturn"
                >Return</a
              >
              <p class="text-muted mt-3" id="return-text">Please note that order returns are only possible within 10 days from the delivery date.</p>
                <%}else{%>
                  <p class="text-muted mt-3">Return expired</p>
                  <%}%>
              <% } else if (order.status !== "Cancelled" && order.status !== "Return Pending" && order.status !== "Return Approved") { %>
              <a
                href="#"
                class="btn btn-md btn-danger buttonCancel"
                onclick="cancelOrderHelper('<%= order._id %>')"
                >Cancel</a
              >
              <% } %>
            </div>
          </div>
        </div>
        <% }) } else { %>
        <h5>No orders</h5>
        <% } %>
      </div>
    </div>

    <%- include("../layouts/userFooter.ejs") %>
    <script src="js/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.0/js/bootstrap.min.js"></script>
    <script src="js/jquery-migrate-3.0.1.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/jquery.easing.1.3.js"></script>
    <script src="js/jquery.waypoints.min.js"></script>
    <script src="js/jquery.stellar.min.js"></script>
    <script src="js/owl.carousel.min.js"></script>
    <script src="js/jquery.magnific-popup.min.js"></script>
    <script src="js/aos.js"></script>
    <script src="js/jquery.animateNumber.min.js"></script>
    <script src="js/bootstrap-datepicker.js"></script>
    <script src="js/scrollax.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="js/google-map.js"></script>
    <script src="js/main.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

    <script>

      const downloadInvoiceHelper = async (orderId)=>{
        try {
          const response = await axios.get(`/invoice/${orderId}`, { responseType: 'blob' });

          // Create a Blob from the response data and create a download link
          const url = window.URL.createObjectURL(new Blob([response.data]));
          const link = document.createElement('a');
          link.href = url;
          link.setAttribute('download', 'invoice.pdf'); // Set the filename for the download
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } catch (error) {
          console.log(error.message);
        }
      }



      const cancelOrderHelper = async (orderId) => {
        try {
          event.preventDefault();
          const total = document.getElementById("total").innerHTML;
          console.log(total);
          swal({
            title: "Cancel Order",
            text: "Are you sure you want to cancel this order?",
            icon: "warning",
            buttons: ["Cancel", "OK"],
            dangerMode: true,
          }).then(async (willDelete) => {
            if (willDelete) {
              // User clicked "OK" button, perform the delete action
              const details = await axios.patch("/cancelOrder", {
                orderId,
                total,
              });

              if (details.data.success) {
                document.getElementById(`statusChange-${orderId}`).innerHTML = `<h5 id="statusChange-${orderId}" class="text-danger">Status: ${details.data.status}</h5>`
                  ;
                const remove = document
                  .getElementById(`cancelButton-${orderId}`)
                  .querySelector(".buttonCancel");
                remove.parentNode.removeChild(remove);
              }
            }
          });
        } catch (error) {
          console.log(error.message);
        }
      };
      const returnOrderHelper = async (orderId) => {
        try {
          event.preventDefault();
          swal({
            title: "Return Order",
            text: "Are you sure you want to return this order?",
            icon: "warning",
            buttons: ["Cancel", "OK"],
            dangerMode: true,
          }).then(async (willDelete) => {
            if (willDelete) {
              // User clicked "OK" button, perform the delete action
              const details = await axios.patch("/returnOrder", {
                orderId,
                total,
              });

              if (details.data.success) {
                document.getElementById(`statusChange-${orderId}`).innerHTML = `<h5 id="statusChange-${orderId}" class="text-danger">Status: ${details.data.status}</h5>`
                const remove = document
                  .getElementById(`cancelButton-${orderId}`)
                  .querySelector(".buttonReturn");
                remove.parentNode.removeChild(remove);
                document.getElementById('return-text').style.display="none"

              }
            }
          });
        } catch (error) {
          console.log(error.message);
        }
      };
    </script>
  </body>
</html>
